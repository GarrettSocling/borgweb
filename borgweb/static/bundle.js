/**
  This file was autogenerated.
  See https://github.com/borgbackup/borgweb
*/
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var dateformat = require('dateformat');

/**
  ~~ Environment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
var env = {
  lastSelectedLog: NaN,
  pollFrequency: 300,
  transitionTime: 170,
  lastRun: 0,
  coolDownTime: 1000,
  icon: {
    success: ['ok-circle', '#5cb85c'],
    warning: ['ban-circle', '#f0ad4e'],
    danger: ['remove-circle', '#c9302c']
  },

  logFilesList: [],
  logFilesListHTML: '',
  shownLog: {
    id: 0, offset: 0, lines: 75, data: [], nextOffset: 0, previousOffset: 0 }
};

/**
  ~~ BorgBackup interaction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
var noBackupRunning = function noBackupRunning(callback) {
  $.getJSON('backup/status', function (resp) {
    var backupRunning = resp.rc === null;
    if (backupRunning) log('▶ Backup in progress');else log('✖ No backup in progress');
    callback(!backupRunning);
  });
};
var pollBackupStatus = function pollBackupStatus(endpoint, ms, callback) {
  noBackupRunning(function (notRunning) {
    if (notRunning) {
      $('.navbar button[type=submit]').toggleClass('btn-success');
      $('.navbar button[type=submit]').toggleClass('btn-warning');
      $('.navbar button[type=submit]').text('▶ Start Backup');
      $.getJSON('logs', updateLogFileList);
    } else {
      log('Polling backup status');
      $.getJSON('backup/status', callback);
      setTimeout(function () {
        pollBackupStatus(endpoint, ms, callback);
      }, ms);
    }
  });
};
var stopBackup = function stopBackup() {
  log('Terminating (eventually killing) the backup process');
  $.post('backup/stop', {}, function (res) {
    log('Message: \'' + res.msg + '\', RC: \'' + res.rc + '\'');
  });
};
var startBackup = function startBackup(force) {
  if (force) {
    log('Sending backup start request');
    if (Date.now() - env['lastRun'] >= env['coolDownTime']) {
      env['lastRun'] = Date.now();
      $.post('backup/start', {}, function () {
        $('.navbar button[type=submit]').toggleClass('btn-success');
        $('.navbar button[type=submit]').toggleClass('btn-warning');
        $('.navbar button[type=submit]').text('✖ Stop Backup');
        pollBackupStatus('backup/status', env['pollFrequency'], function (res) {
          log('Received status update');
        });
      });
    } else log('Restarting backup too fast, ignoring');
  } else if (force === undefined) noBackupRunning(startBackup);else {
    stopBackup();
  }
};

/**
  ~~ Utility ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
var log = function log() {
  var args = Array.prototype.slice.call(arguments);
  var time = '[' + dateformat(new Date(), 'HH:MM:ss') + ']';
  args.unshift(time);
  console.log.apply(console, args);
  return this;
};
var isInt = function isInt(n) {
  return n % 1 === 0;
};
var success = function success(data) {
  logFiles = data.log_files;
};
var parseAnchor = function parseAnchor() {
  var url = window.location.href.toString();
  var idx = url.indexOf('#');
  var anchor = idx != -1 ? url.substring(idx + 1) : '';
  if (anchor) {
    var parts = anchor.split(';');
    var partsParsed = {};
    parts.forEach(function (e) {
      var pair = e.split(':');
      partsParsed[pair[0]] = pair[1];
    });
    return partsParsed;
  } else return { 'log': 0 };
};
var determineLineCount = function determineLineCount() {
  return Math.floor($('#log-text').height() / 18);
};

/**
  ~~ UI updaters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
var updateLogFileList = function updateLogFileList(logFiles) {
  log('Updating log file list');
  env.logFilesListHTML = [];
  $.each(logFiles.files, function (key, value) {
    env.logFilesListHTML += '<li><a href="#log:' + value[0] + '" id="log-' + value[0] + '" onClick="window.showLog(' + value[0] + ')">' + value[1] + '</a></li>';
  });
  $('#log-files').html(env.logFilesListHTML);
  log('Highlighting log # ' + parseInt(env['shownLog']['id']));
  $('#log-' + parseInt(env['shownLog']['id'])).focus();
};
var appendLog = function appendLog(data, overwrite) {
  // set status icon:
  $.getJSON('logs/' + env['shownLog']['id'], function (res) {
    $('#log-path').html('<!-- js generated --><span class="glyphicon glyphicon-' + env['icon'][res.status][0] + '" aria-hidden="true" style="font-size: 34px; color: ' + env['icon'][res.status][1] + '; width: 42px; margin-right: 4px; vertical-align: middle;"></span>' + '<input class="form-control" type="text" value="' + res.filename + '" readonly onClick="this.select();"><!-- /js generated -->');
  });

  // append log text:
  var logText = $('#log-text');
  if (env['shownLog']['offset'] === 0 || overwrite) logText.html('');
  data.lines.forEach(function (val, index) {
    logText.append(val[1] + '\n');
  });
  $('#loadMore').remove();
  env['shownLog']['offset'] = data.offset;
};
var overwriteLog = function overwriteLog(data) {
  appendLog(data, true);
};
var showLog = function showLog(id, offset, lines) {
  var newLog = false;
  if (id !== env['shownLog']['id'] || !isInt(offset)) {
    log('Displaying different log than before');
    $('#log-text').fadeOut(env['transitionTime'] * 0.5);
    var args = parseAnchor();
    env['shownLog']['id'] = args['log'] || 0;
    env['shownLog']['offset'] = 0;
    newLog = true;
  }
  if (isInt(id)) env['shownLog']['id'] = id;else env['shownLog']['offset'] = 0;
  if (isInt(offset)) env['shownLog']['offset'] = offset;
  if (isInt(lines)) env['shownLog']['lines'] = lines;
  log('Now displaying log: ' + env['shownLog']['id']);
  var url = 'logs/' + env['shownLog']['id'] + '/' + env['shownLog']['offset'] + ':' + env['shownLog']['lines'];
  log('Fetching log (' + env['shownLog']['id'] + ', ' + env['shownLog']['offset'] + ', ' + env['shownLog']['lines'] + ')');
  setTimeout(function () {
    if (newLog) $.getJSON(url, overwriteLog);else $.getJSON(url, appendLog);
    $('#log-text').fadeIn(env['transitionTime'] * 0.5);
  }, env['transitionTime'] * 0.5);
};
var changePage = function changePage(offset) {
  showLog(env['shownLog']['id'], offset);
};
var nextPage = function nextPage() {
  log('Opening next log page');
  changePage(env['shownLog']['nextOffset']);
};
var previousPage = function previousPage() {
  log('Opening previous log page');
  changePage(env['shownLog']['previousOffset']);
};

/**
  ~~ UI callables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
window.showLog = function (id, offset, lines) {
  showLog(id, offset, lines);
};
window.startBackup = startBackup;
window.nextPage = nextPage;
window.previousPage = previousPage;

/**
  ~~ Site init ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
env['shownLog']['lines'] = determineLineCount();
$(window).resize(function () {
  log('Windows resized');
  env['shownLog']['lines'] = determineLineCount();
  log('New line count: ' + env['shownLog']['lines']);
});
$.getJSON('logs', updateLogFileList);
showLog();

},{"dateformat":2}],2:[function(require,module,exports){
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

(function(global) {
  'use strict';

  var dateFormat = (function() {
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
      var timezoneClip = /[^-+\dA-Z]/g;
  
      // Regexes and supporting functions are cached through closure
      return function (date, mask, utc, gmt) {
  
        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
        if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
          mask = date;
          date = undefined;
        }
  
        date = date || new Date;
  
        if(!(date instanceof Date)) {
          date = new Date(date);
        }
  
        if (isNaN(date)) {
          throw TypeError('Invalid date');
        }
  
        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);
  
        // Allow setting the utc/gmt argument via the mask
        var maskSlice = mask.slice(0, 4);
        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
          mask = mask.slice(4);
          utc = true;
          if (maskSlice === 'GMT:') {
            gmt = true;
          }
        }
  
        var _ = utc ? 'getUTC' : 'get';
        var d = date[_ + 'Date']();
        var D = date[_ + 'Day']();
        var m = date[_ + 'Month']();
        var y = date[_ + 'FullYear']();
        var H = date[_ + 'Hours']();
        var M = date[_ + 'Minutes']();
        var s = date[_ + 'Seconds']();
        var L = date[_ + 'Milliseconds']();
        var o = utc ? 0 : date.getTimezoneOffset();
        var W = getWeek(date);
        var N = getDayOfWeek(date);
        var flags = {
          d:    d,
          dd:   pad(d),
          ddd:  dateFormat.i18n.dayNames[D],
          dddd: dateFormat.i18n.dayNames[D + 7],
          m:    m + 1,
          mm:   pad(m + 1),
          mmm:  dateFormat.i18n.monthNames[m],
          mmmm: dateFormat.i18n.monthNames[m + 12],
          yy:   String(y).slice(2),
          yyyy: y,
          h:    H % 12 || 12,
          hh:   pad(H % 12 || 12),
          H:    H,
          HH:   pad(H),
          M:    M,
          MM:   pad(M),
          s:    s,
          ss:   pad(s),
          l:    pad(L, 3),
          L:    pad(Math.round(L / 10)),
          t:    H < 12 ? 'a'  : 'p',
          tt:   H < 12 ? 'am' : 'pm',
          T:    H < 12 ? 'A'  : 'P',
          TT:   H < 12 ? 'AM' : 'PM',
          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
          W:    W,
          N:    N
        };
  
        return mask.replace(token, function (match) {
          if (match in flags) {
            return flags[match];
          }
          return match.slice(1, match.length - 1);
        });
      };
    })();

  dateFormat.masks = {
    'default':               'ddd mmm dd yyyy HH:MM:ss',
    'shortDate':             'm/d/yy',
    'mediumDate':            'mmm d, yyyy',
    'longDate':              'mmmm d, yyyy',
    'fullDate':              'dddd, mmmm d, yyyy',
    'shortTime':             'h:MM TT',
    'mediumTime':            'h:MM:ss TT',
    'longTime':              'h:MM:ss TT Z',
    'isoDate':               'yyyy-mm-dd',
    'isoTime':               'HH:MM:ss',
    'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
    'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
  };

  // Internationalization strings
  dateFormat.i18n = {
    dayNames: [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ],
    monthNames: [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
    ]
  };

function pad(val, len) {
  val = String(val);
  len = len || 2;
  while (val.length < len) {
    val = '0' + val;
  }
  return val;
}

/**
 * Get the ISO 8601 week number
 * Based on comments from
 * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
 *
 * @param  {Object} `date`
 * @return {Number}
 */
function getWeek(date) {
  // Remove time components of date
  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // Change date to Thursday same week
  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

  // Take January 4th as it is always in week 1 (see ISO 8601)
  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

  // Change date to Thursday same week
  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

  // Check if daylight-saving-time-switch occured and correct for it
  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  targetThursday.setHours(targetThursday.getHours() - ds);

  // Number of weeks between target Thursday and first Thursday
  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
  return 1 + Math.floor(weekDiff);
}

/**
 * Get ISO-8601 numeric representation of the day of the week
 * 1 (for Monday) through 7 (for Sunday)
 * 
 * @param  {Object} `date`
 * @return {Number}
 */
function getDayOfWeek(date) {
  var dow = date.getDay();
  if(dow === 0) {
    dow = 7;
  }
  return dow;
}

/**
 * kind-of shortcut
 * @param  {*} val
 * @return {String}
 */
function kindOf(val) {
  if (val === null) {
    return 'null';
  }

  if (val === undefined) {
    return 'undefined';
  }

  if (typeof val !== 'object') {
    return typeof val;
  }

  if (Array.isArray(val)) {
    return 'array';
  }

  return {}.toString.call(val)
    .slice(8, -1).toLowerCase();
};



  if (typeof define === 'function' && define.amd) {
    define(dateFormat);
  } else if (typeof exports === 'object') {
    module.exports = dateFormat;
  } else {
    global.dateFormat = dateFormat;
  }
})(this);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
